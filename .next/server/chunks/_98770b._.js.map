{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/src/app/api/users/%5Bid%5D/route.ts"],"sourcesContent":["// API route to get user public info (including phone) by userId\r\nimport { NextRequest, NextResponse } from \"next/server\";\r\nimport { getFirestore } from \"firebase-admin/firestore\";\r\nimport { getApp, getApps, initializeApp, cert } from \"firebase-admin/app\";\r\n\r\nif (!getApps().length) {\r\n  initializeApp({\r\n    credential: cert({\r\n      projectId: process.env.FIREBASE_PROJECT_ID,\r\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n    }),\r\n  });\r\n}\r\n\r\nconst db = getFirestore();\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const userId = params.id;\r\n    if (!userId) return NextResponse.json({ error: \"User ID required\" }, { status: 400 });\r\n    const userDoc = await db.collection(\"users\").doc(userId).get();\r\n    if (!userDoc.exists) return NextResponse.json({ error: \"User not found\" }, { status: 404 });\r\n    const { name, phone, avatar } = userDoc.data() || {};\r\n    return NextResponse.json({ name, phone, avatar });\r\n  } catch (e) {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,gEAAgE;;;;AAChE;AACA;AACA;;;;AAEA,IAAI,CAAC,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,IAAI,MAAM,EAAE;IACrB,CAAA,GAAA,gJAAA,CAAA,gBAAa,AAAD,EAAE;QACZ,YAAY,CAAA,GAAA,gJAAA,CAAA,OAAI,AAAD,EAAE;YACf,WAAW,QAAQ,GAAG,CAAC,mBAAmB;YAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;YAC9C,YAAY,QAAQ,GAAG,CAAC,oBAAoB,EAAE,QAAQ,QAAQ;QAChE;IACF;AACF;AAEA,MAAM,KAAK,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD;AAEf,eAAe,IAAI,GAAgB,EAAE,EAAE,MAAM,EAA8B;IAChF,IAAI;QACF,MAAM,SAAS,OAAO,EAAE;QACxB,IAAI,CAAC,QAAQ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAmB,GAAG;YAAE,QAAQ;QAAI;QACnF,MAAM,UAAU,MAAM,GAAG,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,GAAG;QAC5D,IAAI,CAAC,QAAQ,MAAM,EAAE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;YAAE,QAAQ;QAAI;QACzF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,QAAQ,IAAI,MAAM,CAAC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;YAAM;YAAO;QAAO;IACjD,EAAE,OAAO,GAAG;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;AACF"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,8MAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,6KAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,oLAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}