{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/src/app/api/donated-food/%5Bid%5D/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { getFirestore } from \"firebase-admin/firestore\";\r\nimport { getApps, initializeApp, cert } from \"firebase-admin/app\";\r\nimport cloudinary from \"cloudinary\";\r\n// Cloudinary config (make sure these env vars are set)\r\ncloudinary.v2.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nif (!getApps().length) {\r\n  initializeApp({\r\n    credential: cert({\r\n      projectId: process.env.FIREBASE_PROJECT_ID,\r\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n    }),\r\n  });\r\n}\r\n\r\nconst db = getFirestore();\r\n\r\n// GET donation by ID\r\nexport async function GET(\r\n  request: Request,\r\n  context: { params: Promise<{ id: string }> }\r\n): Promise<Response> {\r\n  try {\r\n    const { id: donationId } = await context.params;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n    const docRef = db.collection(\"donated_food\").doc(donationId);\r\n    const docSnap = await docRef.get();\r\n    if (!docSnap.exists) return NextResponse.json({ error: \"Donation not found\" }, { status: 404 });\r\n    return NextResponse.json({ id: docSnap.id, ...docSnap.data() });\r\n  } catch {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PATCH update donation by ID (supporting multipart/form-data for image upload)\r\nexport async function PATCH(\r\n  request: Request,\r\n  context: { params: Promise<{ id: string }> }\r\n): Promise<Response> {\r\n  try {\r\n    const { id: donationId } = await context.params;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n\r\n    let data: Record<string, unknown> = {};\r\n    let imageUrl = null;\r\n\r\n    // Check if the request is multipart/form-data (for image upload)\r\n    const contentType = request.headers.get(\"content-type\") || \"\";\r\n    if (contentType.includes(\"multipart/form-data\")) {\r\n      const formData = await request.formData();\r\n      data = {\r\n        foodName: formData.get(\"title\"),\r\n        description: formData.get(\"description\"),\r\n        location: formData.get(\"location\"),\r\n        expiryDate: formData.get(\"expiryDate\"),\r\n        pickupInstructions: formData.get(\"pickupInstructions\"),\r\n      };\r\n      const image = formData.get(\"foodImage\");\r\n      if (image && typeof image === \"object\" && \"arrayBuffer\" in image) {\r\n        const buffer = Buffer.from(await image.arrayBuffer());\r\n        await new Promise((resolve, reject) => {\r\n          const stream = cloudinary.v2.uploader.upload_stream(\r\n            { folder: \"donated_food\", resource_type: \"image\" },\r\n            (error, result) => {\r\n              if (error) return reject(error);\r\n              if (result && result.secure_url) {\r\n                imageUrl = result.secure_url;\r\n                resolve(result);\r\n              } else {\r\n                reject(new Error(\"No result from Cloudinary upload\"));\r\n              }\r\n            }\r\n          );\r\n          stream.end(buffer);\r\n        });\r\n        if (imageUrl) {\r\n          data.imageUrl = imageUrl;\r\n        }\r\n      }\r\n    } else {\r\n      data = await request.json();\r\n    }\r\n\r\n    // Remove undefined fields\r\n    Object.keys(data).forEach((k) => (data[k] === undefined ? delete data[k] : undefined));\r\n    const docRef = db.collection(\"donated_food\").doc(donationId);\r\n    await docRef.update(data);\r\n    return NextResponse.json({ success: true, imageUrl: data.imageUrl });\r\n  } catch {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE donation by ID\r\nexport async function DELETE(\r\n  request: Request,\r\n  context: { params: Promise<{ id: string }> }\r\n): Promise<Response> {\r\n  try {\r\n    const { id: donationId } = await context.params;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n    await db.collection(\"donated_food\").doc(donationId).delete();\r\n    return NextResponse.json({ success: true });\r\n  } catch {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,8MAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,6KAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,oLAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}