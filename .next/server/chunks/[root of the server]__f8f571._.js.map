{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/src/app/api/donated-food/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getFirestore } from \"firebase-admin/firestore\";\r\nimport { getApp, getApps, initializeApp, cert } from \"firebase-admin/app\";\r\n\r\nif (!getApps().length) {\r\n  initializeApp({\r\n    credential: cert({\r\n      projectId: process.env.FIREBASE_PROJECT_ID,\r\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, \"\\n\"),\r\n    }),\r\n  });\r\n}\r\n\r\nconst db = getFirestore();\r\n\r\n// GET donation by ID\r\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const donationId = params.id;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n    const docRef = db.collection(\"donated_food\").doc(donationId);\r\n    const docSnap = await docRef.get();\r\n    if (!docSnap.exists) return NextResponse.json({ error: \"Donation not found\" }, { status: 404 });\r\n    return NextResponse.json({ id: docSnap.id, ...docSnap.data() });\r\n  } catch (e) {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// PATCH update donation by ID (supporting multipart/form-data for image upload)\r\nexport async function PATCH(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const donationId = params.id;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n\r\n    let data: any = {};\r\n    let imageUrl = null;\r\n\r\n    // Check if the request is multipart/form-data (for image upload)\r\n    const contentType = req.headers.get(\"content-type\") || \"\";\r\n    if (contentType.includes(\"multipart/form-data\")) {\r\n      const formData = await req.formData();\r\n      data = {\r\n        foodName: formData.get(\"title\"),\r\n        description: formData.get(\"description\"),\r\n        location: formData.get(\"location\"),\r\n        expiryDate: formData.get(\"expiryDate\"),\r\n        pickupInstructions: formData.get(\"pickupInstructions\"),\r\n      };\r\n      const image = formData.get(\"foodImage\");\r\n      if (image && typeof image === \"object\" && \"arrayBuffer\" in image) {\r\n        // Optionally: upload to Cloudinary or other storage here\r\n        // For now, skip image upload logic (add if needed)\r\n      }\r\n    } else {\r\n      data = await req.json();\r\n    }\r\n\r\n    // Remove undefined fields\r\n    Object.keys(data).forEach((k) => (data[k] === undefined ? delete data[k] : undefined));\r\n    const docRef = db.collection(\"donated_food\").doc(donationId);\r\n    await docRef.update(data);\r\n    return NextResponse.json({ success: true });\r\n  } catch (e) {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n\r\n// DELETE donation by ID\r\nexport async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {\r\n  try {\r\n    const donationId = params.id;\r\n    if (!donationId) return NextResponse.json({ error: \"Donation ID required\" }, { status: 400 });\r\n    await db.collection(\"donated_food\").doc(donationId).delete();\r\n    return NextResponse.json({ success: true });\r\n  } catch (e) {\r\n    return NextResponse.json({ error: \"Server error\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}