{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/src/app/api/donated-food/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { getFirestore } from 'firebase-admin/firestore';\r\nimport { getApp, getApps, initializeApp, cert } from 'firebase-admin/app';\r\nimport { v2 as cloudinary } from 'cloudinary';\r\n\r\n\r\nif (!getApps().length) {\r\n  initializeApp({\r\n    credential: cert({\r\n      projectId: process.env.FIREBASE_PROJECT_ID,\r\n      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,\r\n      privateKey: process.env.FIREBASE_PRIVATE_KEY?.replace(/\\\\n/g, '\\n'),\r\n    }),\r\n  });\r\n}\r\n\r\n\r\ncloudinary.config({\r\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\r\n  api_key: process.env.CLOUDINARY_API_KEY,\r\n  api_secret: process.env.CLOUDINARY_API_SECRET,\r\n});\r\n\r\nconst db = getFirestore();\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const formData = await req.formData();\r\n    const foodName = formData.get('foodName');\r\n    const description = formData.get('description');\r\n    const location = formData.get('location');\r\n    const image = formData.get('image');\r\n    const userId = formData.get('userId');\r\n    const expiryDate = formData.get('expiryDate');\r\n    const pickupInstructions = formData.get('pickupInstructions');\r\n\r\n    if (!foodName || !description || !location || !image || !userId) {\r\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\r\n    }\r\n\r\n    let imageUrl = '';\r\n    if (typeof image === 'object' && 'arrayBuffer' in image) {\r\n      const buffer = Buffer.from(await image.arrayBuffer());\r\n      await new Promise((resolve, reject) => {\r\n        const stream = cloudinary.uploader.upload_stream({ folder: 'donated_food' }, (error, result) => {\r\n          if (error) return reject(error);\r\n          imageUrl = result?.secure_url || '';\r\n          resolve(result);\r\n        });\r\n        stream.end(buffer);\r\n      });\r\n    }\r\n\r\n    let avatar = '';\r\n    try {\r\n      const userDoc = await db.collection('users').doc(userId.toString()).get();\r\n      const userData = userDoc.exists ? userDoc.data() : undefined;\r\n      if (userData && userData.avatar) {\r\n        avatar = userData.avatar;\r\n      }\r\n    } catch (e) {\r\n    }\r\n\r\n    const docRef = await db.collection('donated_food').add({\r\n      foodName,\r\n      description,\r\n      location,\r\n      expiryDate,\r\n      pickupInstructions,\r\n      imageUrl,\r\n      userId,\r\n      avatar,\r\n      createdAt: new Date().toISOString(),\r\n    });\r\n\r\n    return NextResponse.json({ success: true, id: docRef.id });\r\n  } catch (error) {\r\n    let message = 'Server error';\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      message = (error as any).message;\r\n    }\r\n    return NextResponse.json({ error: message }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const snapshot = await db.collection('donated_food').orderBy('createdAt', 'desc').get();\r\n    const donations = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    return NextResponse.json({ donations });\r\n  } catch (error) {\r\n    let message = 'Server error';\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      message = (error as any).message;\r\n    }\r\n    return NextResponse.json({ error: message }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const id = searchParams.get('id');\r\n    if (!id) {\r\n      return NextResponse.json({ error: 'Missing donation id' }, { status: 400 });\r\n    }\r\n\r\n    await db.collection('donated_food').doc(id).delete();\r\n    return NextResponse.json({ success: true });\r\n  } catch (error) {\r\n    let message = 'Server error';\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      message = (error as any).message;\r\n    }\r\n    return NextResponse.json({ error: message }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["file://D%3A/FWRP/node_modules/next/dist/src/build/templates/app-route.ts"],"sourcesContent":["import {\n  AppRouteRouteModule,\n  type AppRouteRouteModuleOptions,\n} from '../../server/route-modules/app-route/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\nimport { patchFetch as _patchFetch } from '../../server/lib/patch-fetch'\n\nimport * as userland from 'VAR_USERLAND'\n\n// These are injected by the loader afterwards. This is injected as a variable\n// instead of a replacement because this could also be `undefined` instead of\n// an empty string.\ndeclare const nextConfigOutput: AppRouteRouteModuleOptions['nextConfigOutput']\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\n// INJECT:nextConfigOutput\n\nconst routeModule = new AppRouteRouteModule({\n  definition: {\n    kind: RouteKind.APP_ROUTE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    filename: 'VAR_DEFINITION_FILENAME',\n    bundlePath: 'VAR_DEFINITION_BUNDLE_PATH',\n  },\n  resolvedPagePath: 'VAR_RESOLVED_PAGE_PATH',\n  nextConfigOutput,\n  userland,\n})\n\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule\n\nfunction patchFetch() {\n  return _patchFetch({\n    workAsyncStorage,\n    workUnitAsyncStorage,\n  })\n}\n\nexport {\n  routeModule,\n  workAsyncStorage,\n  workUnitAsyncStorage,\n  serverHooks,\n  patchFetch,\n}\n"],"names":["AppRouteRouteModule","RouteKind","patchFetch","_patchFetch","userland","routeModule","definition","kind","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","workAsyncStorage","workUnitAsyncStorage","serverHooks"],"mappings":";;;;;;;AAAA,SACEA,mBAAmB,QAEd,uDAAsD;AAC7D,SAASC,SAAS,QAAQ,0BAAyB;AACnD,SAASC,cAAcC,WAAW,QAAQ,+BAA8B;AAExE,YAAYC,cAAc,eAAc;;;;;;;;;AAOxC,2EAA2E;AAC3E,UAAU;AACV,MAAA,mBAAA,CAA0B;AAE1B,MAAMC,cAAc,8MAAIL,sBAAAA,CAAoB;IAC1CM,YAAY;QACVC,MAAMN,6KAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACVC,UAAU;QACVC,YAAY;IACd;IACAC,kBAAkB;IAClBC;cACAV;AACF;AAEA,2EAA2E;AAC3E,2EAA2E;AAC3E,mCAAmC;AACnC,MAAM,EAAEW,gBAAgB,EAAEC,oBAAoB,EAAEC,WAAW,EAAE,GAAGZ;AAEhE,SAASH;IACP,oLAAOC,aAAAA,EAAY;QACjBY;QACAC;IACF;AACF","ignoreList":[0]}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}